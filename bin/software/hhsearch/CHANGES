HHsearch 1.0 May 2004

* Version used for benchmark published in Soding J, Bioinformatics (2005).

_______________________________________________________________________________


HHsearch 1.1 August 2004

* Format of *.hhm files was changed. Transition pseudocounts are now 
calculated on the basis of the effective number of sequences that are in
M states, I states and M states, respectively. These numbers are listed
as Neff, Neff_I,  Neff_D in seperate columns of the hhm files. (Improvement
in sensitivity by a few percent.)
* Reduced memory requirements by a factor of four. Memory requirement now is 
approx. 6*MAXRES^2 bytes ( + space for ALL sequences in SEQ records of HMM 
database). MAXRES is maximum number of query residues, 5000 at the moment

_______________________________________________________________________________


HHsearch 1.1.3 November 2004

* Allowed up to 10000 sequences to be displayed in output alignments
* Added warning message when not enough memory available
* Corrected warning message when not enough different superfamilies are 
contained in the searched database to fit the score distribution.
* Removed a bug in the part that builds the output alignments that could cause
a segmentation fault on rare occasions.
* Remove carriage return (CR) symbols in names of input sequences that 
could mess up output alignments when sequences were read in via a web form. 
* Corrected a bug in the calculation of transition probabilities for insert 
states. (Improvement in sensitivity by ~2%.) Need to recalculate old HMMs.
* Changed format of hitlist in output. Now, the first 30 characters of the 
sequence name and description are shown, not only the ID and the family code: 
(No Hit Prob E-value...). This is more suitable for databases other than SCOP 
* Removed limit of 200 characters for sequence descriptions to be able to 
display the extensive annotation for Pfam and SMART alignments, for instance.
* In the output alignment the numbering of the consensus sequence did not 
correspond to the match columns anymore. This has been corrected.

_______________________________________________________________________________


HHsearch 1.1.4 March 2005
 
* Removed small memory allocation bug in function that reads .hhdefaults file.
* Reserve dynamic programming memory dynamically. Memory requirement is now 
6*MAXRES*(Query_length+2) bytes (+ space for ALL sequences in SEQ records of 
HMM database).
* Changed maximum number of sequences in input alignments from 20 000 to 30 000
* Changed maximum length of sequences in input alignments from 20 000 to 30 000
* Changed maximum number of match states MAXRES in input alignments from 5000 
to 6000
* In output alignments, changed the name of the consensus sequences from
'Cons-<id>' to 'Consensus'.
* Added secondary structure-dependent gap penalties ('-ssgap' option).
Gap opening within SS elements costs X bits after 1st, 2X bits after 2nd and 
3X bits after third SS residue, where X is 1.0 bit by default and can be 
changed with the '-ssgapd X' option. 
  => A small benchmark on the CAFASP4 targets showed NO improvement! 
* Included binaries for MacOSX (Darwin) and OSF1/Tru64_UNIX (thanks to Paul 
Sarokas, GSK) 

_______________________________________________________________________________


HHsearch 1.2.0 January 2006
 
* Parallelized hhsearch for SMPs: using option -cpu <int>, hhsearch can be run 
in parallel on several CPUs of a symmetric multiprocessor (SMP) machine. Speed 
with two CPUs is ~1.9x, with two Dual Core AMDs ~3.4x. 
Memory requirements for dynamic programming matrix is now 
~100kb*(Query_length+2) * number of queue bins. 
Number of queue bins = floor(1.2*CPUs+1) (for cpu>1), 1 otherwise

* HHsearch can now automatically detect and read HMMER format (ASCII). 
Predicted secondary structure (or consensus secondary structure) can be 
used in HMMER format in the same way as in HHsearch format. The script
addpsipred.pl is able to add the information for predicted secondary structure
to a HMMER file (as well as to a FASTA alignment). However, representative 
sequences for query-template alignments are not supported by HMMER's format. 
Performance is not as good HMMer-format as for hhm format, so use hhsearch's 
hhm format as far as possible.

* Multiple databases can now be searched with -d 'db1.hhm db2.hhm ...' 

* Added option -alt <int> for displaying up to <int> alternative alignments 
that have no residue pairs in common (e.g. when aligning repeat proteins)

* Added percent sequence identity to alignment information 

* Increased speed of hhsearch database searching by ~15% 

* Added possibility to read from standard input and write to standard output

* Removed the limit 30 000 on maximum number of HMMs in database.

* Increased maximum number of match states in HMM from 6000 to 15000.

* Checked code sanity with Valgrind (a great tool! http://valgring.org)
and removed a bug that was responsible for rare segmentation faults.

* Removed a bug in the maximum sequence identity filtering routine. Before, 
when two sequences had no overlap, the shorter of the two was filtered out.
This could have affected HMMs for multidomain proteins quite badly.

* Changed options for minimum and maximum numbers of sequences in output file 
(options -p, -E, -B, -b, -Z, -z)

* Impoved sensitivity somewhat (~10%) by using option '-diff 100' as default 
for hhmake and hhsearch (use '-diff 0' to turn this option off). Optimized 
internal pseudocount admixture parameter with -diff 100  setting. Results 
between HHsearch 1.2 and earlier versions may therefore differ slightly.

* Perl scripts: Added -Q option to alignblast.pl that allows to include query 
sequence as first sequence of extracted alignment. Script addpsipred.pl can 
now add PSIPRED-predicted secondary structure also to HMMER model files.

* Included binaries for Windows32 (a bit slow, no threads supported)

_______________________________________________________________________________


HHsearch 1.5.0 August 2007


* By default, HHsearch realigns all diplayed alignments in a second stage 
  using the more accurate Maximum A-Posteriori (MAP) alignment algorithm 
  (Durbin, Eddy, Krough, Mitchison: Biological sequence analysis, page 95;
  HMM-HMM version: J. Soeding, unpublished). As before, the Viterbi algorithm 
  is employed for searching and ranking the matches. The realignment step is 
  parallelized (-cpu <int>) and typically takes a few seconds only. You can 
  switch off the MAP realignment with the -norealign option. 
     The posterior probability threshold is controlled with the -mapt [0,1[ 
  option. This parameter controls the alignment algorithm's greediness. More 
  precisely, the MAP algorithm finds the alignment that maximizes the sum of 
  posteriorprobabilites minus mapt for each aligned pair. Global alignments 
  are generated with -mapt 0, whereas -mapt 0.5 will produce quite conservative
  local alignments. Default value is -mapt 0.35, which produces alignments of
  roughly the same length as the Viterbi algorithm. 
     The -global and -local (default) option now refer to both the Viterbi search 
  stage as well as the MAP realignment stage. With -global (-local), the 
  posterior probability matrix will be calculated for global (local) 
  alignment. Note that '-local -mapt 0' will produce global alignments from
  a local posterior probability matrix (which is not at all unreasonable).

* An amino acid compositional bias correction is now performed by default.
  This increases the sensitivity by 25% at 0.01 errors per query and by 5% at 
  0.1 errors per query. By recalibrating the Probabilities, the increased 
  selectivity of this new version allows to give higher probabilities for the 
  same P-values. Also, the score offset could be increased from -0.1 bits to 0 
  as a consequence. 

* The algorithm that filters the set of the most diverse sequences (option 
  -diff) has been improved. Before, it determined the set of the N most 
  diverse sequences. In the case of multi-domain alignments, this could lead 
  to severely underrepresented regions. E.g. when the first domain is only 
  covered by a few fairly similar sequences and the second by hundreds of very 
  diverse ones, most or all of the similar ones were removed. The '-diff N' 
  option now filters the most diverse set of sequences, keeping at least N 
  sequences in each block of >50 columns. This generally leads to a total 
  number of sequences that is larger than N. Speed is similar. The default
  is '-diff 100' for hhmake and hhsearch. Speed is similar. Use -diff 0 to 
  switch this filter off.

* The sensitivity for the -global alignment option has been significantly 
  increased by a more robust statistical treatment. The sensitivity in -global
  mode is now only 0-10% lower than for the default -local option on a SCOP
  benchmark, i.e. when the query or the templates represent single structural 
  domains. The E-values are now more realistic, although still not as 
  reliable as for -local. The Probabilities were recalibrated.

* A new binary HHalign has been added. It is similar to hhsearch, but performs
  only pairwise comparisons. It can produce dot plots, tables of aligned 
  residues, and it can sample alternative alignments stochastically. It uses 
  the MAP algorithm by default. 

* HHsearch and hhalign can generate query-template multiple alignments in 
  FASTA, A2M, or A3M format with the -ofas, -oa2m, -oa3m options 

* Return values were changed to comply with convention that 0 means no errors:
   0: Finished successfully
   1: Format error in input files
   2: File access error
   3: Out of memory 
   4: Syntax error on command line
   6: Internal logic error (please report)
   7: Internal numeric error (please report)
   8: Other
	
* Added script buildali.pl <file> to automatically build PSI-BLAST mutliple 
  sequence alignments, including predicted and DSSP secondary structure. 
  Buildali.pl prunes sequences individually from both ends to reduce corruption 
  by non-homologous fragments (J. Soeding, unpublished).

* Added script hhmakemodel.pl <file.hhr> that parses hhsearch results files 
  and can generate FASTA or PIR multiple alignments or build rough 3D models.

* Removed a bug due to which pseudocounts where added to HMMer HMMs (which 
  already have their own pseudocounts added). This bug severely reduced 
  sensitivity for HMMs read in HMMer format.

* Moved a lot of memory allocation from stack to heap to avoid segmentation 
  faults under some Windows systems.

* Removed a bug due to which the query-template alignments where not displayed
  on some platforms when output was directed to stdout

* Removed a bug that caused occasional segfaults under SunOS when reading HMMer 
  files

* Added multi-threading (-cpu <int>) for Windows x86 platform

* Cleaned up output formatting of summary list for Windows x86

* Stopped support for the Alpha/DEC platform 

* Anyone still interested in Mac OSX/PPC or SunOS support?

_______________________________________________________________________________



Bugs? Ideas? Need for improvement? 
soeding@lmb.uni-muenchen.de
johannes@soeding.com

