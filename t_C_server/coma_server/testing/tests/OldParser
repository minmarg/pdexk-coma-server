package bioinfo.comaWebServer.dataServices;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import bioinfo.comaWebServer.entities.IDS;
import bioinfo.comaWebServer.entities.Job;
import bioinfo.comaWebServer.entities.ResultsAlignment;
import bioinfo.comaWebServer.entities.RAlignmentFooter;
import bioinfo.comaWebServer.entities.RAlignmentHeader;
import bioinfo.comaWebServer.entities.ResultsHit;
import bioinfo.comaWebServer.entities.ResultsQuery;
import bioinfo.comaWebServer.exceptions.NoProfilesFoundException;

public class ComaResultsParser implements IParser
{
    private static final int maxHeaderLength = 250;
    
    public static void main(String[] args) throws IOException
    {
        ComaResultsParser comaResultsParser = new ComaResultsParser();
        Job job = new Job();
        comaResultsParser.parse(job, "tests/comaParser_004.inp");
    }

    public void parse(Job job, String path) throws IOException
    {

        ArrayList<String> data = readFile(path);
        
        try 
        {
            parseHeader(data, job);
            job.setHits(parseHits(data, job));
            job.setAlignments(parseAlignment(data));
            parseFooter(data, job);
        } 
        catch (NoProfilesFoundException e) 
        {
            job.setLog(e.getMessage());
        }
    }
    
    private Set<ResultsAlignment> parseAlignment(ArrayList<String> data)
    {
        Set<ResultsAlignment> alignments = new HashSet<ResultsAlignment>();
        
        int priority = 1;
        
        do
        {
            if(data.size() > 0)
            {
                ResultsAlignment resultsAlignment = new ResultsAlignment();
                
                resultsAlignment.setPriority(priority);

                resultsAlignment.setRheader(parseAlignmentHeader(data));
                
                Set<ResultsQuery> list = parseResultsQuery(data);
                if(list.size() == 0)
                {
                    list = null;
                }
                resultsAlignment.setQueries(list);

                resultsAlignment.setRfooter(parseAlignmentFooter(data));
                
                alignments.add(resultsAlignment);
                
                priority++;
            }
        }
        while(data.size() > 0 && !data.get(0).matches("^Scoring method:.+"));
        
        return alignments;
    }
    
    private Set<ResultsQuery> parseResultsQuery(ArrayList<String> data)
    {
//      Query:   121 GKLTRFDNLTIIDLPTDDTESLATLAERGMNLQCTVQDGTVNIGNDDTLVSVTPEPL 177  
//                   GKLTRFDNLTIIDLPTDDTESLATLAERGMNLQCTVQDGTVNIGNDDTLVSVTPEPL
//      Sbjct:   121 GKLTRFDNLTIIDLPTDDTESLATLAERGMNLQCTVQDGTVNIGNDDTLVSVTPEPL 177  
//
//                                 K        Lambda
//      Computed  ungapped,        0.1950   0.2598
        
//      or <------------------------------------------------------------------->
        
//      Query:   121 KRIE 124  
//                   KRIE
//      Sbjct:   121 KRIE 124  
//
//      >(PF01870.9.pfam.fa) Q18E56_HALWD/9-102 
//      Query length = 124, Sbjct length = 94
        
//      or <------------------------------------------------------------------->
        
//
//      Expected score per position is non-negative, 0.0000!
//      
        
        
        Set<ResultsQuery> list = new HashSet<ResultsQuery>();
        int priority = 0;
        boolean stop = false;
        do
        {
            ResultsQuery resultsQuery = parseQuery(data);
            
            if(resultsQuery != null)
            {
                resultsQuery.setPriority(priority);
                
                list.add(resultsQuery);
                
                priority++;
            }
            else
            {
                stop = true;
            }
        }
        while(!stop);

        return list;
    }
    
    private ResultsQuery parseQuery(ArrayList<String> data)
    {
//      Query:     1 GKNAERELVSILRGEGFNAVRIPTSNSSPNPLPDIFATKGNTLLSIECKSTWENKVKVKE 60   
//      GKNAERELVSILRGEGFNAVRIPTSNSSPNPLPDIFATKGNTLLSIECKSTWENKVKVKE
//      Sbjct:     1 GKNAERELVSILRGEGFNAVRIPTSNSSPNPLPDIFATKGNTLLSIECKSTWENKVKVKE 60
        
//      or <------------------------------------------------------------------->
        
//
//      Expected score per position is non-negative, 0.0000!
//
        
        ResultsQuery resultsQuery = null;

        if(data.get(0).matches("^\\s*Query:.*"))
        {
            resultsQuery = new ResultsQuery();
            
            String str = data.get(0);
            data.remove(0);
            String[] info = str.split("\\s+");
            
            resultsQuery.setQueryBegin(info[1]);
            resultsQuery.setQuery(info[2]);
            resultsQuery.setQueryEnd(info[3]);
        
            String inf = data.get(0).substring(13);
            data.remove(0);
            
            resultsQuery.setInfo(inf);

            info = data.get(0).split("\\s+");
            data.remove(0);
            
            resultsQuery.setSubjectBegin(info[1]);
            resultsQuery.setSubject(info[2]);
            resultsQuery.setSubjectEnd(info[3]);
        }
        else if(data.get(0).matches("^\\s*Expected score per position is non-negative.*"))
        {
            data.remove(0);
        }
        
        return resultsQuery;
    }
    
    private RAlignmentFooter parseAlignmentFooter(ArrayList<String> data)
    {
        
//        K        Lambda
//        Computed  ungapped,        0.1950   0.2598
//        Estimated gapped,          0.0076   0.1412
//        Entropy, 0.8378; Expected, -2.8324; Min/Max, -13/24

        RAlignmentFooter rfooter = null;
        
        if(data.get(0).matches("^\\s*K.+"))
        {
            rfooter = new RAlignmentFooter();
            
            data.remove(0);

            String[] info = data.get(0).split("\\s+");
            data.remove(0);
            
            rfooter.setUngappedK(info[2]);
            rfooter.setUngappedLambda(info[3]);
            
            info = data.get(0).split("\\s+");
            data.remove(0);
            
            rfooter.setGappedK(info[2]);
            rfooter.setGappedLambda(info[3]);
            
            info = data.get(0).split(";");
            data.remove(0);
            
            rfooter.setEntropy(getValue(info[0], ",\\s+"));
            rfooter.setExpected(getValue(info[1], ",\\s+"));
            rfooter.setMinMax(getValue(info[2], ",\\s+"));
        }
        
        return rfooter;
    }
    
    private RAlignmentHeader parseAlignmentHeader(ArrayList<String> data)
    {
//      >(2g3w.aln.hfas) ref|ZP_01894007.1|(1-177:180) hypothetical protein
//        MDG893_14960 [Marinobacter algicola DG893]
//        >gi|149359440|gb|EDM47900.1| hypothetical protein
//        MDG893_14960 [Marinobacter algicola DG893]  E=6e-81 s/c=1.70
//        id=51% cov=97%
//      Query length = 177, Sbjct length = 177
//      
//      Score = 1390.59 (290.4 bits),  Expect = 5.818e-82, P-value = 0
//      Identities = 177/177 (100%)
        
//      or <------------------------------------------------------------------->
        
//      Identities = 8/47 (17%), Positives = 18/47 (38%), Gaps = 12/47 (25%)
//      
//      Query:     1 MALKATIFKATLNIADMDRHYYGDHHLTIARHPSETDERMMIRLLAFILNASESLEFTKG 60 
        
//      or <------------------------------------------------------------------->
        
//      Score = 0.00 (7.8 bits),  Expect = n/a, P-value = n/a
//
//      Expected score per position is non-negative, 0.0000!
//
        
        RAlignmentHeader rheader = null;
        
        if(data.get(0).matches("^>.*"))
        {
            rheader = new RAlignmentHeader();
            
            StringBuffer header = new StringBuffer();
            while(data.size() > 0 && !data.get(0).matches("^\\s*Query length.*"))
            {
                header.append(data.get(0));
                data.remove(0);
            }
            //because of the databases header allocation (maxHeaderLength chars)
            if(header.length() > maxHeaderLength)
            {
                rheader.setHeader(header.substring(0, maxHeaderLength) + "...");
            }
            else
            {
                rheader.setHeader(header.toString());
            }
            
            String[] lengths = data.get(0).split(",");
            data.remove(0);
            
            rheader.setQueryLength(getValue(lengths[0], "=\\s*"));
            rheader.setSubjectLength(getValue(lengths[1], "=\\s*"));
        
            String[] info = data.get(0).split(",");
            data.remove(0);
            
            rheader.setScore(getValue(info[0], "=\\s*"));
            rheader.setExpect(getValue(info[1], "=\\s*"));
            rheader.setPvalue(getValue(info[2], "=\\s*"));

            if(data.get(0).matches("^\\s*Identities\\s*=.*"))
            {
                info = data.get(0).split(",");
                data.remove(0);
                
                rheader.setIdentities(getValue(info[0], "=\\s*"));
                if(info.length > 1)
                {
                    rheader.setPositives(getValue(info[1], "=\\s*"));
                }
                
                if(info.length > 2)
                {
                    rheader.setGaps(getValue(info[2], "=\\s*"));
                }   
            }
        }
        
        return rheader;
    }
    
    private String getValue(String data, String regexp)
    {
        String[] info = data.split(regexp);
        
        return info[1];
    }
    
    private Set<ResultsHit> parseHits(ArrayList<String> data, Job job)
    {
        Set<ResultsHit> hits = new HashSet<ResultsHit>();
        
        // Profiles found below the e-value threshold:                                Score E-value
        data.remove(0);
        
        //>(d1avqa_-c.52.1.13.aln.fas) d1avqa_ c.52.1.13 (A:) lambda exonuclease ...    1045   9e-61
        int priority = 1;
        do
        {
            ResultsHit hit = new ResultsHit();
            hit.setName(data.get(0).substring(0, 74));
            hit.setScore(data.get(0).substring(74, 82).replaceFirst("^\\s*", ""));
            hit.setEvalue(data.get(0).substring(82, data.get(0).length()).replaceFirst("^\\s*", ""));
            hit.setPriority(priority);
            
            hits.add(hit);
            data.remove(0);
            priority++;
        }
        while(data.size() > 0 && !data.get(0).matches("^>\\(.*"));
        
        return hits;
    }
    
    private void parseHeader(ArrayList<String> data, Job job)
    {
        // Profiles found below the e-value threshold:
        do
        {
            if(data.size() > 0 && data.get(0).matches("^\\sNo profiles found below the e-value.*"))
            {
                throw new NoProfilesFoundException(data.get(0));
            }
            data.remove(0);
        }
        while(data.size() > 0 && 
               !data.get(0).matches("^\\sProfiles found below the e-value.*"));
    }
    
    private void parseFooter(ArrayList<String> data, Job job)
    {
        data = null;
    }
    
    public ArrayList<String> readFile(String path) throws IOException
    {
        ArrayList<String> data = new ArrayList<String>();
        
        FileInputStream fstream = new FileInputStream(path);
        
        DataInputStream in = new DataInputStream(fstream);
        
        BufferedReader br = new BufferedReader(new InputStreamReader(in));
        
        String strLine;
        
        while ((strLine = br.readLine()) != null)   
        {
            if(!strLine.equals(""))
            {
                data.add(strLine);  
            }
        }

        in.close();
        br.close();
        
        return data;
    }
    
    public Map<String,IDS> parseIDS(String path) throws IOException
    {
        ArrayList<String> data = readFile(path);
        
        Map<String,IDS> info = new HashMap<String, IDS>();
        
        for(String line: data)
        {
            String[] params = line.split("\\s+");
            
            String[] id1 = params[1].split(":");
            String[] id2 = params[2].split(":");
            
            String pdb  = null;
            String scop = null;
            
            if(id1[0].equals("pdb"))
            {
                if(!id1[1].equals("n/a"))
                {
                    pdb = id1[1];
                }
                if(!id2[1].equals("n/a"))
                {
                    scop = id2[1];
                }
            }
            else
            {
                if(!id1[1].equals("n/a"))
                {
                    scop = id1[1];
                }
                if(!id2[1].equals("n/a"))
                {
                    pdb  = id2[1];
                }
            }
            
            String name = params[0];
            IDS ids     = new IDS(pdb, scop);
            
            info.put(name, ids);
        }
        
        return info;
    }
}
